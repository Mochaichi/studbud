{"mappings":"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","sources":["public/script.js"],"sourcesContent":["//TASKLIST\r\nfunction tasklist() {\r\n  // Setting up variables for our HTML elements using DOM selection\r\n  const form = document.getElementById(\"taskform\");\r\n  const button = document.querySelector(\"#taskform > button\"); // Complex CSS query\r\n  const tasklist = document.getElementById(\"tasklist\");\r\n  const taskInput = document.getElementById(\"taskInput\");\r\n  const dueDateInput = document.getElementById(\"dueDateInput\");\r\n  const completionTimeInput = document.getElementById(\"completionTimeInput\");\r\n  const estimatedTimeInput = document.getElementById(\"estimatedTimeInput\");\r\n  const priorityInput = document.getElementById(\"priorityInput\");\r\n\r\n  // Event listener for Button click\r\n  // This could also be form.addEventListener(\"submit\", function() {...} )\r\n  form.addEventListener(\"submit\", function (event) {\r\n    event.preventDefault(); // Not as necessary for button, but needed for form submit\r\n\r\n    let task = taskInput.value; // could be swapped out for line below\r\n    //let task = taskInput.value;\r\n\r\n    let date = (new Date()).toLocaleDateString('en-US') //Convert to short date format\r\n\r\n    let dueDate = (new Date(dueDateInput.value)).toLocaleDateString('en-US');\r\n\r\n    let completionTime = completionTimeInput.value;\r\n\r\n    let estimatedTime = estimatedTimeInput.value;\r\n\r\n    let priority = priorityInput.value\r\n\r\n    // Call the addTask() function using\r\n    addTask(task, date, dueDate, priority, completionTime, estimatedTime, false);\r\n\r\n    // Log out the newly populated taskList everytime the button has been pressed\r\n    console.log(taskList);\r\n  })\r\n\r\n  // Create an empty array to store our tasks\r\n  var taskList = [];\r\n\r\n  function addTask(taskDescription, createdDate, dueDate, priorityRating, completionTime, estimatedTime, completionStatus) {\r\n    let task = {\r\n      id: Date.now(),\r\n      taskDescription,\r\n      createdDate,\r\n      dueDate,\r\n      priorityRating,\r\n      completionTime,\r\n      estimatedTime,\r\n      completionStatus\r\n    };\r\n\r\n    // Add the task to our array of tasks\r\n    taskList.push(task);\r\n\r\n    // Separate the DOM manipulation from the object creation logic\r\n    renderTask(task);\r\n\r\n\r\n  }\r\n\r\n\r\n  // Function to display the item on the page\r\n  function renderTask(task) {\r\n\r\n    updateEmpty();\r\n\r\n\r\n    let item = document.createElement(\"div\");\r\n    item.classList.add(\"taskItem\")\r\n    item.setAttribute(\"data-id\", task.id);\r\n    item.innerHTML = \"<p>\" + task.taskDescription + \" | \" + \"created on: \" + task.createdDate + \" | \" + \"Due on: \" + task.dueDate + \" | \" + \"Priority rate: \" + task.priorityRating + \" | \" + \"Estimated time completed: \" + task.estimatedTime + \" minutes\" + \"</p>\";\r\n    let tasklist = document.getElementById('tasklist');\r\n    tasklist.appendChild(item);\r\n\r\n\r\n\r\n    tasklist.appendChild(item);\r\n\r\n    // Setup delete button DOM elements\r\n    let delButton = document.createElement(\"button\");\r\n    let delButtonText = document.createTextNode(\"Delete\");\r\n    delButton.appendChild(delButtonText);\r\n    item.appendChild(delButton); // Adds a delete button to every task\r\n\r\n    // Listen for when the \r\n    delButton.addEventListener(\"click\", function (event) {\r\n      event.preventDefault();\r\n      let id = event.target.parentElement.getAttribute(\"data-id\");\r\n      let index = taskList.findIndex(task => task.id === Number(id));\r\n      removeItemFromArray(taskList, index);\r\n\r\n      console.log(taskList);\r\n\r\n      updateEmpty();\r\n\r\n      item.remove(); // Remove the task item from the page when button clicked\r\n      // Because we used 'let' to define the item, this will always delete the right element\r\n    })\r\n\r\n    // Clear the value of the input once the task has been added to the page\r\n    form.reset();\r\n  }\r\n\r\n  function removeItemFromArray(arr, index) {\r\n    if (index > -1) {\r\n      arr.splice(index, 1)\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  function updateEmpty() {\r\n    if (taskList.length > 0) {\r\n      document.getElementById(\"emptyList\").style.display = \"none\";\r\n    } else {\r\n      document.getElementById(\"emptyList\").style.display = \"block\";\r\n    }\r\n  }\r\n}\r\n\r\nfunction openForm() {\r\n  document.getElementById(\"popupForm\").style.display = \"block\";\r\n}\r\n\r\nfunction closeForm() {\r\n  document.getElementById(\"popupForm\").style.display = \"none\";\r\n}\r\n\r\n//TIMER\r\n// Convert time to a format of hours, minutes, seconds, and milliseconds\r\nfunction timer() {\r\n  function timeToString(time) {\r\n    let diffInHrs = time / 3600000;\r\n    let hh = Math.floor(diffInHrs);\r\n\r\n    let diffInMin = (diffInHrs - hh) * 60;\r\n    let mm = Math.floor(diffInMin);\r\n\r\n    let diffInSec = (diffInMin - mm) * 60;\r\n    let ss = Math.floor(diffInSec);\r\n\r\n    let diffInMs = (diffInSec - ss) * 100;\r\n    let ms = Math.floor(diffInMs);\r\n\r\n    let formattedMM = mm.toString().padStart(2, \"0\");\r\n    let formattedSS = ss.toString().padStart(2, \"0\");\r\n    let formattedMS = ms.toString().padStart(2, \"0\");\r\n\r\n    return `${formattedMM}:${formattedSS}:${formattedMS}`;\r\n  }\r\n\r\n  // Declare variables to use in our functions below\r\n\r\n  let startTime;\r\n  let elapsedTime = 0;\r\n  let timerInterval;\r\n\r\n  // Create function to modify innerHTML\r\n\r\n  function print(txt) {\r\n    document.getElementById(\"display\").innerHTML = txt;\r\n  }\r\n\r\n  // Create \"start\", \"pause\" and \"reset\" functions\r\n\r\n  function start() {\r\n    startTime = Date.now() - elapsedTime;\r\n    timerInterval = setInterval(function printTime() {\r\n      elapsedTime = Date.now() - startTime;\r\n      print(timeToString(elapsedTime));\r\n    }, 10);\r\n    showButton(\"PAUSE\");\r\n  }\r\n\r\n  function pause() {\r\n    clearInterval(timerInterval);\r\n    showButton(\"PLAY\");\r\n  }\r\n\r\n  function reset() {\r\n    clearInterval(timerInterval);\r\n    print(\"00:00:00\");\r\n    elapsedTime = 0;\r\n    showButton(\"PLAY\");\r\n  }\r\n\r\n  // Create function to display buttons\r\n\r\n  function showButton(buttonKey) {\r\n    const buttonToShow = buttonKey === \"PLAY\" ? playButton : pauseButton;\r\n    const buttonToHide = buttonKey === \"PLAY\" ? pauseButton : playButton;\r\n    buttonToShow.style.display = \"block\";\r\n    buttonToHide.style.display = \"none\";\r\n  }\r\n  // Create event listeners\r\n\r\n  let playButton = document.getElementById(\"playButton\");\r\n  let pauseButton = document.getElementById(\"pauseButton\");\r\n  let resetButton = document.getElementById(\"resetButton\");\r\n\r\n  playButton.addEventListener(\"click\", start);\r\n  pauseButton.addEventListener(\"click\", pause);\r\n  resetButton.addEventListener(\"click\", reset);\r\n}"],"names":["tasklist","form","document","getElementById","taskInput","querySelector","dueDateInput","completionTimeInput","estimatedTimeInput","priorityInput","addEventListener","event","preventDefault","task","value","date","Date","toLocaleDateString","dueDate","completionTime","estimatedTime","taskDescription","createdDate","priorityRating","completionStatus","id","now","taskList","push","task1","updateEmpty","item","createElement","classList","add","setAttribute","innerHTML","tasklist2","appendChild","delButton","delButtonText","createTextNode","target","parentElement","getAttribute","index","findIndex","Number","arr","splice","removeItemFromArray","console","log","remove","reset","renderTask","addTask","length","style","display","openForm","closeForm","timer","startTime","timerInterval","elapsedTime","print","txt","showButton","buttonKey","buttonToHide","pauseButton","playButton","resetButton","setInterval","time","diffInHrs","diffInMin","Math","floor","mm","diffInSec","ss","diffInMs","ms","toString","padStart","timeToString","clearInterval"],"version":3,"file":"index.a6306625.js.map"}