{"mappings":"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","sources":["public/script.js"],"sourcesContent":["//TIMER\r\n// Convert time to a format of hours, minutes, seconds, and milliseconds\r\n\r\nfunction timeToString(time) {\r\n  let diffInHrs = time / 3600000;\r\n  let hh = Math.floor(diffInHrs);\r\n\r\n  let diffInMin = (diffInHrs - hh) * 60;\r\n  let mm = Math.floor(diffInMin);\r\n\r\n  let diffInSec = (diffInMin - mm) * 60;\r\n  let ss = Math.floor(diffInSec);\r\n\r\n  let diffInMs = (diffInSec - ss) * 100;\r\n  let ms = Math.floor(diffInMs);\r\n\r\n  let formattedMM = mm.toString().padStart(2, \"0\");\r\n  let formattedSS = ss.toString().padStart(2, \"0\");\r\n  let formattedMS = ms.toString().padStart(2, \"0\");\r\n\r\n  return `${formattedMM}:${formattedSS}:${formattedMS}`;\r\n}\r\n\r\n// Declare variables to use in our functions below\r\n\r\nlet startTime;\r\nlet elapsedTime = 0;\r\nlet timerInterval;\r\n\r\n// Create function to modify innerHTML\r\n\r\nfunction print(txt) {\r\n  document.getElementById(\"display\").innerHTML = txt;\r\n}\r\n\r\n// Create \"start\", \"pause\" and \"reset\" functions\r\n\r\nfunction start() {\r\n  startTime = Date.now() - elapsedTime;\r\n  timerInterval = setInterval(function printTime() {\r\n    elapsedTime = Date.now() - startTime;\r\n    print(timeToString(elapsedTime));\r\n  }, 10);\r\n  showButton(\"PAUSE\");\r\n}\r\n\r\nfunction pause() {\r\n  clearInterval(timerInterval);\r\n  showButton(\"PLAY\");\r\n}\r\n\r\nfunction reset() {\r\n  clearInterval(timerInterval);\r\n  print(\"00:00:00\");\r\n  elapsedTime = 0;\r\n  showButton(\"PLAY\");\r\n}\r\n\r\n// Create function to display buttons\r\n\r\nfunction showButton(buttonKey) {\r\n  const buttonToShow = buttonKey === \"PLAY\" ? playButton : pauseButton;\r\n  const buttonToHide = buttonKey === \"PLAY\" ? pauseButton : playButton;\r\n  buttonToShow.style.display = \"block\";\r\n  buttonToHide.style.display = \"none\";\r\n}\r\n// Create event listeners\r\n\r\nlet playButton = document.getElementById(\"playButton\");\r\nlet pauseButton = document.getElementById(\"pauseButton\");\r\nlet resetButton = document.getElementById(\"resetButton\");\r\n\r\nplayButton.addEventListener(\"click\", start);\r\npauseButton.addEventListener(\"click\", pause);\r\nresetButton.addEventListener(\"click\", reset);\r\n\r\n//NAVIGATION\r\n\r\nfunction navBar() {\r\n    var x = document.getElementById(\"myTopnav\");\r\n    if (x.className === \"topnav\") {\r\n      x.className += \" responsive\";\r\n    } else {\r\n      x.className = \"topnav\";\r\n    }\r\n  }\r\n\r\n\r\n  \r\n//TASKLIST\r\n\r\n// Setting up variables for our HTML elements using DOM selection\r\nconst form = document.getElementById(\"taskform\");\r\nconst button = document.querySelector(\"#taskform > button\"); // Complex CSS query\r\nconst tasklist = document.getElementById(\"tasklist\");\r\nconst taskInput = document.getElementById(\"taskInput\");\r\nconst dueDateInput = document.getElementById(\"dueDateInput\");\r\nconst completionTimeInput = document.getElementById(\"completionTimeInput\");\r\nconst estimatedTimeInput = document.getElementById(\"estimatedTimeInput\");\r\nconst priorityInput = document.getElementById(\"priorityInput\");\r\n\r\n// Event listener for Button click\r\n// This could also be form.addEventListener(\"submit\", function() {...} )\r\nbutton.addEventListener(\"click\", function(event) {\r\n  event.preventDefault(); // Not as necessary for button, but needed for form submit\r\n\r\n  let task = taskInput.value; // could be swapped out for line below\r\n  //let task = taskInput.value;\r\n\r\n  let date = (new Date()).toLocaleDateString('en-US') //Convert to short date format\r\n\r\n  let dueDate = (new Date(dueDateInput.value)).toLocaleDateString('en-US');\r\n\r\n  let completionTime = completionTimeInput.value;\r\n\r\n  let estimatedTime = estimatedTimeInput.value;\r\n\r\n  let priority = priorityInput.value\r\n\r\n  // Call the addTask() function using\r\n  addTask(task, date, dueDate, priority, completionTime, estimatedTime, false);\r\n\r\n  // Log out the newly populated taskList everytime the button has been pressed\r\n  console.log(taskList);\r\n})\r\n\r\n// Create an empty array to store our tasks\r\nvar taskList = [];\r\n\r\nfunction addTask(taskDescription, createdDate, dueDate, priorityRating, completionTime, estimatedTime, completionStatus) {\r\n  let task = {\r\n    id: Date.now(),\r\n    taskDescription,\r\n    createdDate,\r\n    dueDate,\r\n    priorityRating,\r\n    completionTime,\r\n    estimatedTime,\r\n    completionStatus\r\n  };\r\n\r\n  // Add the task to our array of tasks\r\n  taskList.push(task);\r\n\r\n  // Separate the DOM manipulation from the object creation logic\r\n  renderTask(task);\r\n}\r\n\r\n\r\n// Function to display the item on the page\r\nfunction renderTask(task) {\r\n\r\n  updateEmpty();\r\n\r\n  let item = document.createElement(\"li\");\r\n  item.setAttribute(\"data-id\", task.id);\r\n  item.innerHTML = \"<p>\" + task.taskDescription + \"<p>\" + \"created on: \" + task.createdDate + \"<p>\" +  \"due on: \" + task.dueDate + \"<p>\" + \"priority rate: \" + task.priorityRating + \"<p>\" + \"estimated time completed: \" + task.estimatedTime + \"</p>\";\r\n\r\n  tasklist.appendChild(item);\r\n\r\n  // Setup delete button DOM elements\r\n  let delButton = document.createElement(\"button\");\r\n  let delButtonText = document.createTextNode(\"Delete\");\r\n  delButton.appendChild(delButtonText);\r\n  item.appendChild(delButton); // Adds a delete button to every task\r\n\r\n  // Listen for when the \r\n  delButton.addEventListener(\"click\", function(event){\r\n    event.preventDefault();\r\n    let id = event.target.parentElement.getAttribute(\"data-id\");\r\n    let index = taskList.findIndex(task => task.id === Number(id));\r\n    removeItemFromArray(taskList, index);\r\n\r\n    console.log(taskList);\r\n\r\n    updateEmpty();\r\n\r\n    item.remove(); // Remove the task item from the page when button clicked\r\n    // Because we used 'let' to define the item, this will always delete the right element\r\n  })\r\n  \r\n  // Clear the value of the input once the task has been added to the page\r\n  form.reset();\r\n}\r\n\r\nfunction removeItemFromArray(arr, index){\r\n  if (index > -1){\r\n    arr.splice(index, 1)\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction updateEmpty(){\r\n  if (taskList.length > 0){\r\n    document.getElementById(\"emptyList\").style.display = \"none\";\r\n  } else{\r\n    document.getElementById(\"emptyList\").style.display = \"block\";\r\n  }\r\n}\r\n\r\n"],"names":["timeToString","time","diffInHrs","diffInMin","Math","floor","mm","diffInSec","ss","diffInMs","ms","toString","padStart","startTime","timerInterval","elapsedTime","print","txt","document","getElementById","innerHTML","start","Date","now","setInterval","showButton","pause","clearInterval","reset","buttonKey","buttonToHide","pauseButton","playButton","style","display","resetButton","navBar","x","className","addEventListener","form","button","querySelector","tasklist","taskInput","dueDateInput","completionTimeInput","estimatedTimeInput","priorityInput","event","preventDefault","task","value","date","toLocaleDateString","dueDate","completionTime","estimatedTime","addTask","console","log","taskList","taskDescription","createdDate","priorityRating","completionStatus","id","push","renderTask","task1","updateEmpty","item","createElement","setAttribute","appendChild","delButton","delButtonText","createTextNode","target","parentElement","getAttribute","index","findIndex","Number","removeItemFromArray","remove","arr","splice","length"],"version":3,"file":"timer.dd9acb74.js.map"}